# BOT VERSION: 2025-08-26-01
import os
import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    print("‚ùå ERROR: TOKEN environment variable is not set!")
    exit(1)
else:
    print(f"‚úÖ TOKEN found: {TOKEN[:5]}...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, name TEXT, is_coach INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS events
                 (event_id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT, type TEXT, status TEXT DEFAULT 'open')''')
    c.execute('''CREATE TABLE IF NOT EXISTS participants
                 (event_id INTEGER, user_id INTEGER,
                 FOREIGN KEY(event_id) REFERENCES events(event_id),
                 FOREIGN KEY(user_id) REFERENCES users(user_id))''')
    conn.commit()
    conn.close()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚úÖ help_command called - VERSION 2025-08-26-01")
    user = update.effective_user
    conn = sqlite3.connect('hockey.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", (user.id, user.full_name))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"‚úÖ {user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üèí *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤*\n"
        "/mark ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n"
        "üëë *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞*\n"
        "/set\\_coach ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ (–∞–¥–º–∏–Ω)\n"
        "/create_event –î–î\\.–ú–ú –¢–∏–ø ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/form\\_teams ‚Äî —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—è—Ç—ë—Ä–∫–∏"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

def main():
    try:
        init_db()
        print("‚úÖ Database initialized")
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Application builder created")

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        print("‚úÖ Handlers added")

        print("üöÄ Starting bot polling...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"‚ùå CRITICAL ERROR: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
